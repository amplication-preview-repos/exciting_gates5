/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { TicketTier } from "./TicketTier";
import { TicketTierCountArgs } from "./TicketTierCountArgs";
import { TicketTierFindManyArgs } from "./TicketTierFindManyArgs";
import { TicketTierFindUniqueArgs } from "./TicketTierFindUniqueArgs";
import { CreateTicketTierArgs } from "./CreateTicketTierArgs";
import { UpdateTicketTierArgs } from "./UpdateTicketTierArgs";
import { DeleteTicketTierArgs } from "./DeleteTicketTierArgs";
import { Event } from "../../event/base/Event";
import { TicketTierService } from "../ticketTier.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => TicketTier)
export class TicketTierResolverBase {
  constructor(
    protected readonly service: TicketTierService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "TicketTier",
    action: "read",
    possession: "any",
  })
  async _ticketTiersMeta(
    @graphql.Args() args: TicketTierCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [TicketTier])
  @nestAccessControl.UseRoles({
    resource: "TicketTier",
    action: "read",
    possession: "any",
  })
  async ticketTiers(
    @graphql.Args() args: TicketTierFindManyArgs
  ): Promise<TicketTier[]> {
    return this.service.ticketTiers(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => TicketTier, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "TicketTier",
    action: "read",
    possession: "own",
  })
  async ticketTier(
    @graphql.Args() args: TicketTierFindUniqueArgs
  ): Promise<TicketTier | null> {
    const result = await this.service.ticketTier(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => TicketTier)
  @nestAccessControl.UseRoles({
    resource: "TicketTier",
    action: "create",
    possession: "any",
  })
  async createTicketTier(
    @graphql.Args() args: CreateTicketTierArgs
  ): Promise<TicketTier> {
    return await this.service.createTicketTier({
      ...args,
      data: {
        ...args.data,

        event: args.data.event
          ? {
              connect: args.data.event,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => TicketTier)
  @nestAccessControl.UseRoles({
    resource: "TicketTier",
    action: "update",
    possession: "any",
  })
  async updateTicketTier(
    @graphql.Args() args: UpdateTicketTierArgs
  ): Promise<TicketTier | null> {
    try {
      return await this.service.updateTicketTier({
        ...args,
        data: {
          ...args.data,

          event: args.data.event
            ? {
                connect: args.data.event,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TicketTier)
  @nestAccessControl.UseRoles({
    resource: "TicketTier",
    action: "delete",
    possession: "any",
  })
  async deleteTicketTier(
    @graphql.Args() args: DeleteTicketTierArgs
  ): Promise<TicketTier | null> {
    try {
      return await this.service.deleteTicketTier(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Event, {
    nullable: true,
    name: "event",
  })
  @nestAccessControl.UseRoles({
    resource: "Event",
    action: "read",
    possession: "any",
  })
  async getEvent(@graphql.Parent() parent: TicketTier): Promise<Event | null> {
    const result = await this.service.getEvent(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
