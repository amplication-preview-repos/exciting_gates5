/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { PurchasedTicket } from "./PurchasedTicket";
import { PurchasedTicketCountArgs } from "./PurchasedTicketCountArgs";
import { PurchasedTicketFindManyArgs } from "./PurchasedTicketFindManyArgs";
import { PurchasedTicketFindUniqueArgs } from "./PurchasedTicketFindUniqueArgs";
import { CreatePurchasedTicketArgs } from "./CreatePurchasedTicketArgs";
import { UpdatePurchasedTicketArgs } from "./UpdatePurchasedTicketArgs";
import { DeletePurchasedTicketArgs } from "./DeletePurchasedTicketArgs";
import { Event } from "../../event/base/Event";
import { Ticket } from "../../ticket/base/Ticket";
import { User } from "../../user/base/User";
import { PurchasedTicketService } from "../purchasedTicket.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => PurchasedTicket)
export class PurchasedTicketResolverBase {
  constructor(
    protected readonly service: PurchasedTicketService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "PurchasedTicket",
    action: "read",
    possession: "any",
  })
  async _purchasedTicketsMeta(
    @graphql.Args() args: PurchasedTicketCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [PurchasedTicket])
  @nestAccessControl.UseRoles({
    resource: "PurchasedTicket",
    action: "read",
    possession: "any",
  })
  async purchasedTickets(
    @graphql.Args() args: PurchasedTicketFindManyArgs
  ): Promise<PurchasedTicket[]> {
    return this.service.purchasedTickets(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => PurchasedTicket, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "PurchasedTicket",
    action: "read",
    possession: "own",
  })
  async purchasedTicket(
    @graphql.Args() args: PurchasedTicketFindUniqueArgs
  ): Promise<PurchasedTicket | null> {
    const result = await this.service.purchasedTicket(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PurchasedTicket)
  @nestAccessControl.UseRoles({
    resource: "PurchasedTicket",
    action: "create",
    possession: "any",
  })
  async createPurchasedTicket(
    @graphql.Args() args: CreatePurchasedTicketArgs
  ): Promise<PurchasedTicket> {
    return await this.service.createPurchasedTicket({
      ...args,
      data: {
        ...args.data,

        event: args.data.event
          ? {
              connect: args.data.event,
            }
          : undefined,

        ticket: args.data.ticket
          ? {
              connect: args.data.ticket,
            }
          : undefined,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PurchasedTicket)
  @nestAccessControl.UseRoles({
    resource: "PurchasedTicket",
    action: "update",
    possession: "any",
  })
  async updatePurchasedTicket(
    @graphql.Args() args: UpdatePurchasedTicketArgs
  ): Promise<PurchasedTicket | null> {
    try {
      return await this.service.updatePurchasedTicket({
        ...args,
        data: {
          ...args.data,

          event: args.data.event
            ? {
                connect: args.data.event,
              }
            : undefined,

          ticket: args.data.ticket
            ? {
                connect: args.data.ticket,
              }
            : undefined,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PurchasedTicket)
  @nestAccessControl.UseRoles({
    resource: "PurchasedTicket",
    action: "delete",
    possession: "any",
  })
  async deletePurchasedTicket(
    @graphql.Args() args: DeletePurchasedTicketArgs
  ): Promise<PurchasedTicket | null> {
    try {
      return await this.service.deletePurchasedTicket(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Event, {
    nullable: true,
    name: "event",
  })
  @nestAccessControl.UseRoles({
    resource: "Event",
    action: "read",
    possession: "any",
  })
  async getEvent(
    @graphql.Parent() parent: PurchasedTicket
  ): Promise<Event | null> {
    const result = await this.service.getEvent(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Ticket, {
    nullable: true,
    name: "ticket",
  })
  @nestAccessControl.UseRoles({
    resource: "Ticket",
    action: "read",
    possession: "any",
  })
  async getTicket(
    @graphql.Parent() parent: PurchasedTicket
  ): Promise<Ticket | null> {
    const result = await this.service.getTicket(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(
    @graphql.Parent() parent: PurchasedTicket
  ): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
