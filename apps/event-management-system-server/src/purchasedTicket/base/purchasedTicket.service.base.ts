/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  PurchasedTicket as PrismaPurchasedTicket,
  Event as PrismaEvent,
  Ticket as PrismaTicket,
  User as PrismaUser,
} from "@prisma/client";

export class PurchasedTicketServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PurchasedTicketCountArgs, "select">
  ): Promise<number> {
    return this.prisma.purchasedTicket.count(args);
  }

  async purchasedTickets(
    args: Prisma.PurchasedTicketFindManyArgs
  ): Promise<PrismaPurchasedTicket[]> {
    return this.prisma.purchasedTicket.findMany(args);
  }
  async purchasedTicket(
    args: Prisma.PurchasedTicketFindUniqueArgs
  ): Promise<PrismaPurchasedTicket | null> {
    return this.prisma.purchasedTicket.findUnique(args);
  }
  async createPurchasedTicket(
    args: Prisma.PurchasedTicketCreateArgs
  ): Promise<PrismaPurchasedTicket> {
    return this.prisma.purchasedTicket.create(args);
  }
  async updatePurchasedTicket(
    args: Prisma.PurchasedTicketUpdateArgs
  ): Promise<PrismaPurchasedTicket> {
    return this.prisma.purchasedTicket.update(args);
  }
  async deletePurchasedTicket(
    args: Prisma.PurchasedTicketDeleteArgs
  ): Promise<PrismaPurchasedTicket> {
    return this.prisma.purchasedTicket.delete(args);
  }

  async getEvent(parentId: string): Promise<PrismaEvent | null> {
    return this.prisma.purchasedTicket
      .findUnique({
        where: { id: parentId },
      })
      .event();
  }

  async getTicket(parentId: string): Promise<PrismaTicket | null> {
    return this.prisma.purchasedTicket
      .findUnique({
        where: { id: parentId },
      })
      .ticket();
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.purchasedTicket
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
