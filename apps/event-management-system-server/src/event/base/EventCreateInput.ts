/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import {
  IsDate,
  IsOptional,
  IsString,
  MaxLength,
  IsBoolean,
  ValidateNested,
} from "class-validator";
import { Type } from "class-transformer";
import { IsJSONValue } from "../../validators";
import { GraphQLJSON } from "graphql-type-json";
import { InputJsonValue } from "../../types";
import { PurchasedTicketCreateNestedManyWithoutEventsInput } from "./PurchasedTicketCreateNestedManyWithoutEventsInput";
import { SubAdminCreateNestedManyWithoutEventsInput } from "./SubAdminCreateNestedManyWithoutEventsInput";
import { TicketTierCreateNestedManyWithoutEventsInput } from "./TicketTierCreateNestedManyWithoutEventsInput";
import { UserWhereUniqueInput } from "../../user/base/UserWhereUniqueInput";

@InputType()
class EventCreateInput {
  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  approvedDate?: Date | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @Field(() => String)
  coverImage!: string;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @Field(() => String)
  description!: string;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  eventDate!: Date;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  eventLocation?: string | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @Field(() => String)
  eventType!: string;

  @ApiProperty({
    required: false,
  })
  @IsJSONValue()
  @IsOptional()
  @Field(() => GraphQLJSON, {
    nullable: true,
  })
  guestPerformers?: InputJsonValue;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  isApproved?: boolean | null;

  @ApiProperty({
    required: false,
    type: () => PurchasedTicketCreateNestedManyWithoutEventsInput,
  })
  @ValidateNested()
  @Type(() => PurchasedTicketCreateNestedManyWithoutEventsInput)
  @IsOptional()
  @Field(() => PurchasedTicketCreateNestedManyWithoutEventsInput, {
    nullable: true,
  })
  purchasedTickets?: PurchasedTicketCreateNestedManyWithoutEventsInput;

  @ApiProperty({
    required: false,
    type: () => SubAdminCreateNestedManyWithoutEventsInput,
  })
  @ValidateNested()
  @Type(() => SubAdminCreateNestedManyWithoutEventsInput)
  @IsOptional()
  @Field(() => SubAdminCreateNestedManyWithoutEventsInput, {
    nullable: true,
  })
  subAdmins?: SubAdminCreateNestedManyWithoutEventsInput;

  @ApiProperty({
    required: false,
    type: () => TicketTierCreateNestedManyWithoutEventsInput,
  })
  @ValidateNested()
  @Type(() => TicketTierCreateNestedManyWithoutEventsInput)
  @IsOptional()
  @Field(() => TicketTierCreateNestedManyWithoutEventsInput, {
    nullable: true,
  })
  ticketTiers?: TicketTierCreateNestedManyWithoutEventsInput;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @Field(() => String)
  title!: string;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  trailer?: string | null;

  @ApiProperty({
    required: true,
    type: () => UserWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => UserWhereUniqueInput)
  @Field(() => UserWhereUniqueInput)
  user!: UserWhereUniqueInput;
}

export { EventCreateInput as EventCreateInput };
