/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { SubAdminService } from "../subAdmin.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { SubAdminCreateInput } from "./SubAdminCreateInput";
import { SubAdmin } from "./SubAdmin";
import { SubAdminFindManyArgs } from "./SubAdminFindManyArgs";
import { SubAdminWhereUniqueInput } from "./SubAdminWhereUniqueInput";
import { SubAdminUpdateInput } from "./SubAdminUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class SubAdminControllerBase {
  constructor(
    protected readonly service: SubAdminService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SubAdmin })
  @nestAccessControl.UseRoles({
    resource: "SubAdmin",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createSubAdmin(
    @common.Body() data: SubAdminCreateInput
  ): Promise<SubAdmin> {
    return await this.service.createSubAdmin({
      data: {
        ...data,

        event: data.event
          ? {
              connect: data.event,
            }
          : undefined,
      },
      select: {
        createdAt: true,

        event: {
          select: {
            id: true,
          },
        },

        eventRelation: true,
        id: true,
        isActive: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [SubAdmin] })
  @ApiNestedQuery(SubAdminFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "SubAdmin",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async subAdmins(@common.Req() request: Request): Promise<SubAdmin[]> {
    const args = plainToClass(SubAdminFindManyArgs, request.query);
    return this.service.subAdmins({
      ...args,
      select: {
        createdAt: true,

        event: {
          select: {
            id: true,
          },
        },

        eventRelation: true,
        id: true,
        isActive: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SubAdmin })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "SubAdmin",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async subAdmin(
    @common.Param() params: SubAdminWhereUniqueInput
  ): Promise<SubAdmin | null> {
    const result = await this.service.subAdmin({
      where: params,
      select: {
        createdAt: true,

        event: {
          select: {
            id: true,
          },
        },

        eventRelation: true,
        id: true,
        isActive: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SubAdmin })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "SubAdmin",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateSubAdmin(
    @common.Param() params: SubAdminWhereUniqueInput,
    @common.Body() data: SubAdminUpdateInput
  ): Promise<SubAdmin | null> {
    try {
      return await this.service.updateSubAdmin({
        where: params,
        data: {
          ...data,

          event: data.event
            ? {
                connect: data.event,
              }
            : undefined,
        },
        select: {
          createdAt: true,

          event: {
            select: {
              id: true,
            },
          },

          eventRelation: true,
          id: true,
          isActive: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SubAdmin })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "SubAdmin",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteSubAdmin(
    @common.Param() params: SubAdminWhereUniqueInput
  ): Promise<SubAdmin | null> {
    try {
      return await this.service.deleteSubAdmin({
        where: params,
        select: {
          createdAt: true,

          event: {
            select: {
              id: true,
            },
          },

          eventRelation: true,
          id: true,
          isActive: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
