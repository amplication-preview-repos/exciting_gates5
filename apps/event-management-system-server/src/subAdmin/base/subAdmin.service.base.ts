/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  SubAdmin as PrismaSubAdmin,
  Event as PrismaEvent,
  User as PrismaUser,
} from "@prisma/client";

export class SubAdminServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.SubAdminCountArgs, "select">): Promise<number> {
    return this.prisma.subAdmin.count(args);
  }

  async subAdmins(
    args: Prisma.SubAdminFindManyArgs
  ): Promise<PrismaSubAdmin[]> {
    return this.prisma.subAdmin.findMany(args);
  }
  async subAdmin(
    args: Prisma.SubAdminFindUniqueArgs
  ): Promise<PrismaSubAdmin | null> {
    return this.prisma.subAdmin.findUnique(args);
  }
  async createSubAdmin(
    args: Prisma.SubAdminCreateArgs
  ): Promise<PrismaSubAdmin> {
    return this.prisma.subAdmin.create(args);
  }
  async updateSubAdmin(
    args: Prisma.SubAdminUpdateArgs
  ): Promise<PrismaSubAdmin> {
    return this.prisma.subAdmin.update(args);
  }
  async deleteSubAdmin(
    args: Prisma.SubAdminDeleteArgs
  ): Promise<PrismaSubAdmin> {
    return this.prisma.subAdmin.delete(args);
  }

  async getEvent(parentId: string): Promise<PrismaEvent | null> {
    return this.prisma.subAdmin
      .findUnique({
        where: { id: parentId },
      })
      .event();
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.subAdmin
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
