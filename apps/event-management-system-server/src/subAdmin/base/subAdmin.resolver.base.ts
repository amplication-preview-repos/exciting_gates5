/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { SubAdmin } from "./SubAdmin";
import { SubAdminCountArgs } from "./SubAdminCountArgs";
import { SubAdminFindManyArgs } from "./SubAdminFindManyArgs";
import { SubAdminFindUniqueArgs } from "./SubAdminFindUniqueArgs";
import { CreateSubAdminArgs } from "./CreateSubAdminArgs";
import { UpdateSubAdminArgs } from "./UpdateSubAdminArgs";
import { DeleteSubAdminArgs } from "./DeleteSubAdminArgs";
import { Event } from "../../event/base/Event";
import { SubAdminService } from "../subAdmin.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => SubAdmin)
export class SubAdminResolverBase {
  constructor(
    protected readonly service: SubAdminService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "SubAdmin",
    action: "read",
    possession: "any",
  })
  async _subAdminsMeta(
    @graphql.Args() args: SubAdminCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [SubAdmin])
  @nestAccessControl.UseRoles({
    resource: "SubAdmin",
    action: "read",
    possession: "any",
  })
  async subAdmins(
    @graphql.Args() args: SubAdminFindManyArgs
  ): Promise<SubAdmin[]> {
    return this.service.subAdmins(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => SubAdmin, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "SubAdmin",
    action: "read",
    possession: "own",
  })
  async subAdmin(
    @graphql.Args() args: SubAdminFindUniqueArgs
  ): Promise<SubAdmin | null> {
    const result = await this.service.subAdmin(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SubAdmin)
  @nestAccessControl.UseRoles({
    resource: "SubAdmin",
    action: "create",
    possession: "any",
  })
  async createSubAdmin(
    @graphql.Args() args: CreateSubAdminArgs
  ): Promise<SubAdmin> {
    return await this.service.createSubAdmin({
      ...args,
      data: {
        ...args.data,

        event: args.data.event
          ? {
              connect: args.data.event,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SubAdmin)
  @nestAccessControl.UseRoles({
    resource: "SubAdmin",
    action: "update",
    possession: "any",
  })
  async updateSubAdmin(
    @graphql.Args() args: UpdateSubAdminArgs
  ): Promise<SubAdmin | null> {
    try {
      return await this.service.updateSubAdmin({
        ...args,
        data: {
          ...args.data,

          event: args.data.event
            ? {
                connect: args.data.event,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SubAdmin)
  @nestAccessControl.UseRoles({
    resource: "SubAdmin",
    action: "delete",
    possession: "any",
  })
  async deleteSubAdmin(
    @graphql.Args() args: DeleteSubAdminArgs
  ): Promise<SubAdmin | null> {
    try {
      return await this.service.deleteSubAdmin(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Event, {
    nullable: true,
    name: "event",
  })
  @nestAccessControl.UseRoles({
    resource: "Event",
    action: "read",
    possession: "any",
  })
  async getEvent(@graphql.Parent() parent: SubAdmin): Promise<Event | null> {
    const result = await this.service.getEvent(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
