datasource db {
  provider = "mongodb"
  url      = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Wallet {
  createdAt    DateTime @default(now())
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  pin          String?
  totalAmount  Float?
  transactions Json?
  updatedAt    DateTime @updatedAt
  users        User[]
}

model Event {
  approvedDate    DateTime?
  coverImage      String?
  createdAt       DateTime   @default(now())
  description     String?
  eventDate       DateTime?
  eventLocation   String?
  eventType       String?
  guestPerformers Json?
  id              String     @id @default(auto()) @map("_id") @db.ObjectId
  isApproved      Boolean?
  subAdmins       SubAdmin[]
  ticketTiers     Json?
  title           String?
  trailer         String?
  updatedAt       DateTime   @updatedAt
  user            User?      @relation(fields: [userId], references: [id])
  userId          String?    @db.ObjectId
}

model Ticket {
  createdAt DateTime          @default(now())
  id        String            @id @default(auto()) @map("_id") @db.ObjectId
  qrCode    String?
  status    EnumTicketStatus?
  updatedAt DateTime          @updatedAt
}

model Admin {
  bannedUsers   Json?
  createdAt     DateTime @default(now())
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  managedEvents Json?
  updatedAt     DateTime @updatedAt
}

model Notification {
  createdAt   DateTime @default(now())
  description String?
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  isRead      Boolean?
  link        String?
  title       String?
  updatedAt   DateTime @updatedAt
  user        User?    @relation(fields: [userId], references: [id])
  userId      String?  @db.ObjectId
}

model User {
  createdAt     DateTime       @default(now())
  email         String?        @unique
  events        Event[]
  firstName     String?
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  lastName      String?
  mobile        String?
  nationality   String?
  nickName      String?
  notifications Notification[]
  password      String
  preferences   Json?
  roles         Json
  subAdmins     SubAdmin[]
  updatedAt     DateTime       @updatedAt
  username      String         @unique
  wallet        Wallet?        @relation(fields: [walletId], references: [id])
  walletId      String?        @db.ObjectId
}

model SubAdmin {
  createdAt DateTime @default(now())
  event     Event?   @relation(fields: [eventId], references: [id])
  eventId   String?  @db.ObjectId
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  isActive  Boolean?
  updatedAt DateTime @updatedAt
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?  @db.ObjectId
}

model TicketTier {
  amountOnSale    Int?
  amountOnSaleTs  Int?
  amountSold      Int?
  amountSoldTs    Int?
  createdAt       DateTime  @default(now())
  endDate         DateTime?
  endDateTs       DateTime?
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  purchasePrice   Float?
  purchasePriceTs Float?
  startDate       DateTime?
  startDateTs     DateTime?
  title           String?
  titleTs         String?
  updatedAt       DateTime  @updatedAt
}

model Transaction {
  amount                Float?
  amountTxn             Float?
  createdAt             DateTime                              @default(now())
  id                    String                                @id @default(auto()) @map("_id") @db.ObjectId
  metadata              Json?
  metadataTs            Json?
  metadataTxn           Json?
  transactionType       String?
  transactionTypeEnumTs EnumTransactionTransactionTypeEnumTs?
  transactionTypeTs     String?
  transactionTypeTxn    String?
  updatedAt             DateTime                              @updatedAt
  walletRelationTxn     String?
  walletTxn             String?
}

enum EnumTicketStatus {
  Option1
}

enum EnumTransactionTransactionTypeEnumTs {
  Option1
}
