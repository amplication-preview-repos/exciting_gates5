datasource db {
  provider = "mongodb"
  url      = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Wallet {
  createdAt    DateTime      @default(now())
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  pin          String
  totalAmount  Float
  transactions Transaction[]
  updatedAt    DateTime      @updatedAt
  user         User          @relation(fields: [userId], references: [id])
  userId       String        @unique @db.ObjectId
}

model Event {
  approvedDate     DateTime?
  coverImage       String
  createdAt        DateTime          @default(now())
  description      String
  eventDate        DateTime
  eventLocation    String?
  eventType        String
  guestPerformers  Json?
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  isApproved       Boolean?
  purchasedTickets PurchasedTicket[]
  subAdmins        SubAdmin[]
  ticketTiers      TicketTier[]
  title            String
  trailer          String?
  updatedAt        DateTime          @updatedAt
  user             User              @relation(fields: [userId], references: [id])
  userId           String            @db.ObjectId
}

model Notification {
  createdAt   DateTime @default(now())
  description String?
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  isRead      Boolean?
  link        String?
  title       String
  updatedAt   DateTime @updatedAt
  user        User?    @relation(fields: [userId], references: [id])
  userId      String?  @db.ObjectId
}

model User {
  createdAt           DateTime          @default(now())
  email               String?           @unique
  eventPreferences    Preference[]      @relation(fields: [eventPreferencesIds], references: [id])
  eventPreferencesIds String[]          @db.ObjectId
  events              Event[]
  firstName           String?
  id                  String            @id @default(auto()) @map("_id") @db.ObjectId
  isBan               Boolean
  lastName            String?
  mobile              String?
  nationality         String?
  nickName            String?
  notifications       Notification[]
  password            String
  purchasedTickets    PurchasedTicket[]
  roles               Json
  subAdmins           SubAdmin[]
  updatedAt           DateTime          @updatedAt
  username            String            @unique
  wallet              Wallet?
}

model SubAdmin {
  createdAt DateTime @default(now())
  event     Event    @relation(fields: [eventId], references: [id])
  eventId   String   @db.ObjectId
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  isActive  Boolean?
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
}

model TicketTier {
  amountOnSale     Int?
  amountSold       Int?
  createdAt        DateTime          @default(now())
  endDate          DateTime?
  event            Event?            @relation(fields: [eventId], references: [id])
  eventId          String?           @db.ObjectId
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  purchasedTickets PurchasedTicket[]
  purchasePrice    Float?
  startDate        DateTime?
  title            String?
  updatedAt        DateTime          @updatedAt
}

model Transaction {
  amount          Float?
  createdAt       DateTime                        @default(now())
  id              String                          @id @default(auto()) @map("_id") @db.ObjectId
  metadata        Json?
  transactionType EnumTransactionTransactionType?
  updatedAt       DateTime                        @updatedAt
  wallet          Wallet?                         @relation(fields: [walletId], references: [id])
  walletId        String?                         @db.ObjectId
}

model PurchasedTicket {
  code         String
  createdAt    DateTime                   @default(now())
  event        Event                      @relation(fields: [eventId], references: [id])
  eventId      String                     @db.ObjectId
  id           String                     @id @default(auto()) @map("_id") @db.ObjectId
  status       EnumPurchasedTicketStatus?
  ticketTier   TicketTier                 @relation(fields: [ticketTierId], references: [id])
  ticketTierId String                     @db.ObjectId
  updatedAt    DateTime                   @updatedAt
  user         User                       @relation(fields: [userId], references: [id])
  userId       String                     @db.ObjectId
}

model Preference {
  createdAt   DateTime @default(now())
  description String?
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  image       String?
  title       String
  updatedAt   DateTime @updatedAt
  users       User[]   @relation(fields: [usersIds], references: [id])
  usersIds    String[] @db.ObjectId
}

enum EnumTransactionTransactionType {
  Withdraw
  Deposit
  Spend
}

enum EnumPurchasedTicketStatus {
  Used
  UnUsed
}
